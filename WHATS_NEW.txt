Change log for DELORES project

Version 0.59 - 13/01/00
-----------------------
CHANGES:
    * bug fix in deleteFirstLiteral()
    * CGI interface completed; internal documentation added
    * more code added to well-founded defeasible logic routines, but still not
      entirely complete
    * wrote "DELORES User's Manual" (manual.html)
    * wrote "DELORES Programmer's Guide" (program.html)
    * split up dl.c into dl.c (routines called by parser) and main.c (point of
      entry to interpreter; responsible for initialization routines, etc.).
      main.c could eventually be replaced by a fully-integrated CGI or GUI
      interface.
TO ADD:
    * use GNU Autoconf to make cross-platform/compiler compatibility easier
      (this will require extensively changing/removing the existing
      preprocessor directives, but will probably be well worth it)
    * use makemake to simplify Makefile maintenance
    * use rcs or similar to simplify revision control
    * improve CGI interface to make it state-persistent
    * intelligent use of quiet mode (check isatty() on POSIX systems)
    * ability to list rules sorted by specified criterion
    * support for variables and grounding
    * ability to toggle grounding
    * semantics for `faild' and `failD' declarations
    * syntax and semantics for `private' declarations
    * GUI interface
    * trace back through `include()' filenames on error
    * all spellings (identifiers, error messages, etc.) are Canadian -- perhaps
      they should be changed to Australian...?
BUGS:
    * `include()' statements must be on separate lines
    * Makefile still needs minor tweaking to work in DOS
    * primes.txt is complete only for primes <= 1299827
UNRESOLVED IMPLEMENTATION ISSUES:
    * how to handle redefinition of rules
    * format for fprint[Rule|Atom] -- use `~' or `neg' in output?
    * how to check state of constants
MISC:
    * the current CGI interface is not fully integrated into the interpreter;
      it merely calls the interpreter via POSIX pipes
    * new `include()' code means the lexer (dl.l) is now tied to flex;
      however, the lexer produced by flex conforms to ANSI C89.
    * code for real-time timers is compiler-specific; see timer.h for
      details.  If your compiler is not supported, all real-time timers
      remain at time 0.


Version 0.58 - 01/01/00
-----------------------
CHANGES:
    * project named DELORES
    * added command line argument lexer cmd_line_args.l -- many program
      options can now be set with command-line parameters
    * tweaking to code cosmetics and documentation
    * unnecessary code and documentation removed from BGET library
    * added `quiet mode' for future CGI/GUI interface compatibility
    * improved error handling: in interactive mode, the parser will allow
      unlimited syntax errors so that they can be corrected; otherwise, the
      parser will list the first ERROR_LIMIT errors and abort
    * fatal error messages now more helpful and consistent
    * added a rudimentary CGI interface (see MISC below) -- note that this
      is untested due to lack of LAN access over the holidays
    * checkInference() optimized for speed
    * abstract (context-independent) literal add/delete functions initLiteral()
      and deleteLiteral() may now be used to add and remove literals from lists
      at any time
    * added most of well-founded defeasible logic routines; incomplete due
      largely to lack of LAN access over the holidays
BUGS:
    * `include()' statements must be on separate lines
    * Makefile still needs minor tweaking to work in DOS
    * primes.txt is complete only for primes <= 1299827
UNRESOLVED IMPLEMENTATION ISSUES:
    * how to handle redefinition of rules
    * format for fprint[Rule|Atom] -- use `~' or `neg' in output?
    * how to check state of constants
MISC:
    * the current CGI interface is not fully integrated into the interpreter;
      it merely calls the interpreter via POSIX pipes
    * new `include()' code means the lexer (dl.l) is now tied to flex;
      however, the lexer produced by flex conforms to ANSI C89.
    * code for real-time timers is compiler-specific; see timer.h for
      details.  If your compiler is not supported, all real-time timers
      remain at time 0.


Version 0.57 - 13/12/99
-----------------------
CHANGES:
    * dynamically-allocated memory now freed after yyparse()
    * fixed memory bug in deleteRule()
BUGS:
    * some problems with Makefile; can't get it to compile in non-glibc
      environments
    * `include()' statements must be on separate lines
    * certain characters are not permitted in `include()' filenames
    * Makefile still needs minor tweaking to work in DOS
    * primes.txt is complete only for primes <= 1299827
UNRESOLVED IMPLEMENTATION ISSUES:
    * how to handle redefinition of rules
    * format for fprint[Rule|Atom] -- use `~' or `neg' in output?
    * how to check state of constants
MISC:
    * new `include()' code means the lexer (dl.l) is now tied to flex;
      however, the lexer produced by flex conforms to ANSI C89.
    * code for real-time timers is compiler-specific; see timer.h for
      details.  If your compiler is not supported, all real-time timers
      remain at time 0.


Version 0.56 - 13/12/99
-----------------------
CHANGES:
    * fixed potential (but unlikely) bug in deleteNextOccurrence()
    * improved internal documentation
    * added alternate memory management package, BGET -- up to 30% faster
    * split up dl_compile.h into dl_inline.h, dl_strdup.h, dl_stdbool.h,
      dl_stdint.h
    * new macro DL_PROFILE, when enabled, times program execution
BUGS:
    * some problems with Makefile; can't get it to compile in non-glibc
      environments
    * `include()' statements must be on separate lines
    * certain characters are not permitted in `include()' filenames
    * Makefile still needs minor tweaking to work in DOS
    * primes.txt is complete only for primes <= 1299827
UNRESOLVED IMPLEMENTATION ISSUES:
    * how to handle redefinition of rules
    * format for fprint[Rule|Atom] -- use `~' or `neg' in output?
    * how to check state of constants
MISC:
    * new `include()' code means the lexer (dl.l) is now tied to flex;
      however, the lexer produced by flex conforms to ANSI C89.
    * code for real-time timers is compiler-specific; see timer.h for
      details.  If your compiler is not supported, all real-time timers
      remain at time 0.


Version 0.55 - 08/12/99
-----------------------
CHANGES:
    * improved hash function -- incidence of collisions reduced drastically
    * misc. tweaking to hash ADT
    * cosmetic changes to code
BUGS:
    * some problems with Makefile; can't get it to compile in non-glibc
      environments
    * `include()' statements must be on separate lines
    * certain characters are not permitted in `include()' filenames
    * Makefile still needs minor tweaking to work in DOS
    * current dynamic memory allocation scheme is too slow
    * primes.txt is complete only for primes <= 1299827
UNRESOLVED IMPLEMENTATION ISSUES:
    * how to handle redefinition of rules
    * format for fprint[Rule|Atom] -- use `~' or `neg' in output?
    * how to check state of constants
MISC:
    * new `include()' code means the lexer (dl.l) is now tied to flex;
      however, the lexer produced by flex conforms to ANSI C89.
    * code for real-time timers is compiler-specific; see timer.h for
      details.  If your compiler is not supported, all real-time timers
      remain at time 0.


Version 0.54 - 04/12/99
-----------------------
CHANGES:
    * completely rewrote hash table routines; much more efficient now
    * rewrote fprintRule() to make use of hash iterators, qsort(), etc.
    * moved compiler-specific directives to dl_compile.h
    * miscellaneous code optimizations
BUGS:
    * some problems with Makefile; can't get it to compile in non-glibc
      environments
    * `include()' statements must be on separate lines
    * certain characters are not permitted in `include()' filenames
    * Makefile still needs minor tweaking to work in DOS
    * current dynamic memory allocation scheme is too slow
    * primes.txt is complete only for primes <= 1299827
UNRESOLVED IMPLEMENTATION ISSUES:
    * how to handle redefinition of rules
    * format for fprint[Rule|Atom] -- use `~' or `neg' in output?
    * how to check state of constants
MISC:
    * new `include()' code means the lexer (dl.l) is now tied to flex;
      however, the lexer produced by flex conforms to ANSI C89.
    * code for real-time timers is compiler-specific; see timer.h for
      details.  If your compiler is not supported, all real-time timers
      remain at time 0.


Version 0.53 - 26/11/99
-----------------------
CHANGES:
    * added conditional compilation directives to make the code fully
      compliant with both ANSI C89 and ANSI C9X
    * put dl_strdup() and gmalloc() in separate source files
BUGS:
    * `include()' statements must be on separate lines
    * certain characters are not permitted in `include()' filenames
    * Makefile still needs minor tweaking to work in DOS
    * slow performance on some types of problem domains(?)
    * primes.txt is complete only for primes <= 1299827
UNRESOLVED IMPLEMENTATION ISSUES:
    * how to handle redefinition of rules
    * format for fprint[Rule|Atom] -- use `~' or `neg' in output?
    * how to check state of constants
MISC:
    * new `include()' code means the lexer (dl.l) is now tied to flex;
      however, the lexer produced by flex conforms to ANSI C89.
    * code for real-time timers is compiler-specific; see timer.h for
      details.  If your compiler is not supported, all real-time timers
      remain at time 0.


Version 0.52 - 25/11/99
-----------------------
CHANGES:
    * added abstract timer start/stop functions; multiple simultaneous timers
      are now allowed
    * timer functions are now wrapped in conditional directives to ensure
      proper compilation for ANSI C
    * miscellaneous code optimizations
    * improved syntax for `faild' and `failD' declarations
    * split infer() into two functions, one for the initialization routine
      and one for the while() loop -- easier to read now
BUGS:
    * `include()' statements must be on separate lines
    * certain characters are not permitted in `include()' filenames
    * Makefile still needs minor tweaking to work in DOS
    * slow performance on some types of problem domains(?)
    * primes.txt is complete only for primes <= 1299827
UNRESOLVED IMPLEMENTATION ISSUES:
    * how to handle redefinition of rules
    * format for fprint[Rule|Atom] -- use `~' or `neg' in output?
    * how to check state of constants
MISC:
    * new `include()' code means the lexer (dl.l) is now tied to flex;
      however, the lexer produced by flex conforms to ANSI C89.
    * code for real-time timers is compiler-specific; see timer.h for
      details.  If your compiler is not supported, all real-time timers
      remain at time 0.


Version 0.51 - 24/11/99
-----------------------
CHANGES:
    * added code for strdup() in case the compiler doesn't provide it
    * checks for __GNUC__ before using anything in <sys/timeb.h>
    * program is now fully compliant with ANSI C89 (but not C9X)
    * fixed major malloc() bug in elimSupRel()
    * fixed parser debug code
    * syntax for `faild' and `failD' declarations
    * maximum nesting depth for `include()' #defined as 15 in dl.l
    * p+ and p- initialized as normal atoms (all variables FALSE)
    * added/changed several compilation options in Makefile:
        make -- standard compilation with debug code
        make efence -- extra debug code for finding malloc() bugs
                       (requires the efence library by Bruce Perens)
        make prof -- compile in profiling info
        make ansi -- makes ANSI C89 compliant code
        make optimized -- no debugging code
        make clean -- removes intermediate source/object files
        make bak -- creates a backup of current directory in ./bak/
BUGS:
    * `include()' statements must be on separate lines
    * certain characters are not permitted in `include()' filenames
    * Makefile still needs minor tweaking to work in DOS
    * slow performance on some types of problem domains(?)
    * primes.txt is complete only for primes <= 1299827
UNRESOLVED IMPLEMENTATION ISSUES:
    * how to handle redefinition of rules
    * format for fprint[Rule|Atom] -- use `~' or `neg' in output?
    * how to check state of constants
MISC:
    * new `include()' code means the lexer (dl.l) is now tied to flex;
      however, the lexer produced by flex conforms to ANSI C89.
    * ftime() is not ANSI C, and as such real-time timing information
      may not be available on some systems


Version 0.50 - 23/11/99
-----------------------
CHANGES:
    * added `include()' command to read commands from given file
    * hash table sizes now default to prime numbers
    * added command-line arguments specifying hash table size
    * hash table size is now represented, appropriately, as a size_t
    * increased default hash table size to 3+1E6
BUGS:
    * `include()' statements must be on separate lines
    * certain characters are not permitted in `include()' filenames
    * code is not ANSI compliant (e.g. strdup())
    * some Makefile actions may not work under DOS
    * slow performance on some types of problem domains(?)
    * primes.txt is complete only for primes <= 1299827
UNRESOLVED IMPLEMENTATION ISSUES:
    * how to handle redefinition of rules
    * format for fprint[Rule|Atom] -- use `~' or `neg' in output?
    * how to check state of constants
    * how are p+ and p- initialized?
    * maximum nesting depth for `include()' files
MISC:
    * new `include()' code means the lexer (dl.l) is now tied to flex;
      however, the lexer produced by flex conforms to ANSI C89.


Version 0.40 - 15/11/99
-----------------------
CHANGES:
    * added superiority relation decomposition
    * added defeater decomposition
    * bulk of functionality moved from lexer (dl.l) to parser (dl.y)
    * new history-based rule- and atom-naming scheme


Version 0.30 and earlier - 09/11/99
-----------------------------------
CHANGES:
    * added `%' comments
    * removed sequential rule ordering
    * added `print()' command for atoms
    * added `listing()' command for rules
    * added `unknown' declarations
    * added `end' command
    * added implicit declaration of rules in superiority relations
    * allows duplicate labels (keep rule but rename label)
    * added nameless rules
